package forcomp

object AnagramsTest {
  /** A word is simply a `String`. */
  type Word = String

  /** A sentence is a `List` of words. */
  type Sentence = List[Word]

  /** `Occurrences` is a `List` of pairs of characters and positive integers saying
   *  how often the character appears.
   *  This list is sorted alphabetically w.r.t. to the character in each pair.
   *  All characters in the occurrence list are lowercase.
   *
   *  Any list of pairs of lowercase characters and their frequency which is not sorted
   *  is **not** an occurrence list.
   *
   *  Note: If the frequency of some character is zero, then that character should not be
   *  in the list.
   */
  type Occurrences = List[(Char, Int)]

  /** The dictionary is simply a sequence of words.
   *  It is predefined and obtained as a sequence using the utility method `loadDictionary`.
   */
   val w = "abcfe"                                //> w  : String = abcfe
   
 //val dictionary: List[Word] = List("Aarhus","Aaron","aback","abaft","ate","eat","tea")
 val dictionary: List[Word] = loadDictionary      //> dictionary  : List[forcomp.AnagramsTest.Word] = List(Aarhus, Aaron, Ababa, 
                                                  //| aback, abaft, abandon, abandoned, abandoning, abandonment, abandons, abase,
                                                  //|  abased, abasement, abasements, abases, abash, abashed, abashes, abashing, 
                                                  //| abasing, abate, abated, abatement, abatements, abater, abates, abating, Abb
                                                  //| a, abbe, abbey, abbeys, abbot, abbots, Abbott, abbreviate, abbreviated, abb
                                                  //| reviates, abbreviating, abbreviation, abbreviations, Abby, abdomen, abdomen
                                                  //| s, abdominal, abduct, abducted, abduction, abductions, abductor, abductors,
                                                  //|  abducts, Abe, abed, Abel, Abelian, Abelson, Aberdeen, Abernathy, aberrant,
                                                  //|  aberration, aberrations, abet, abets, abetted, abetter, abetting, abeyance
                                                  //| , abhor, abhorred, abhorrent, abhorrer, abhorring, abhors, abide, abided, a
                                                  //| bides, abiding, Abidjan, Abigail, Abilene, abilities, ability, abject, abje
                                                  //| ction, abjections, abjectly, abjectness, abjure, abjured, abjures, abjuring
                                                  //| , ablate, ablated, abla
                                                  //| Output exceeds cutoff limit.

println(dictionary.head)                          //> Aarhus
  /** Converts the word into its character occurrence list.
   *
   *  Note: the uppercase and lowercase version of the character are treated as the
   *  same character, and are represented as a lowercase character in the occurrence list.
   *
   *  Note: you must use `groupBy` to implement this method!
   */
   val x="abca"                                   //> x  : String = abca
   val y = x.toList                               //> y  : List[Char] = List(a, b, c, a)
   
  def wordOccurrences(w: Word): Occurrences =
  (w.toLowerCase.toList.groupBy(x=>x) map{case (k,v) => (k,v.size)} toList).sortWith((x,y)=>x._1<y._1)
                                                  //> wordOccurrences: (w: forcomp.AnagramsTest.Word)forcomp.AnagramsTest.Occurre
                                                  //| nces

  /** Converts a sentence into its character occurrence list. */
  
  val z = List("dbc","Bcd","cas","add")           //> z  : List[String] = List(dbc, Bcd, cas, add)
  val m = z.mkString("")                          //> m  : String = dbcBcdcasadd
  
  def sentenceOccurrences(s: Sentence): Occurrences = wordOccurrences(s.mkString(""))
                                                  //> sentenceOccurrences: (s: forcomp.AnagramsTest.Sentence)forcomp.AnagramsTest
                                                  //| .Occurrences

sentenceOccurrences(z)                            //> res0: forcomp.AnagramsTest.Occurrences = List((a,2), (b,2), (c,3), (d,4), (
                                                  //| s,1))
  /** The `dictionaryByOccurrences` is a `Map` from different occurrences to a sequence of all
   *  the words that have that occurrence count.
   *  This map serves as an easy way to obtain all the anagrams of a word given its occurrence list.
   *
   *  For example, the word "eat" has the following character occurrence list:
   *
   *     `List(('a', 1), ('e', 1), ('t', 1))`
   *
   *  Incidentally, so do the words "ate" and "tea".
   *
   *  This means that the `dictionaryByOccurrences` map will contain an entry:
   *
   *    List(('a', 1), ('e', 1), ('t', 1)) -> Seq("ate", "eat", "tea")
   *
   */
  lazy val dictionaryByOccurrences: Map[Occurrences, List[Word]] =
  dictionary.groupBy(x=>wordOccurrences(x))       //> dictionaryByOccurrences: => Map[forcomp.AnagramsTest.Occurrences,List[forco
                                                  //| mp.AnagramsTest.Word]]

dictionaryByOccurrences.head                      //> res1: (forcomp.AnagramsTest.Occurrences, List[forcomp.AnagramsTest.Word]) =
                                                  //|  (List((e,1), (i,1), (l,1), (r,1), (t,2)),List(litter))
                                                  
dictionaryByOccurrences.contains(List(('e',1), ('i',1), ('l',1), ('r',1), ('t',2)))
                                                  //> res2: Boolean = true

  /** Returns all the anagrams of a given word. */
  def wordAnagrams(word: Word): List[Word] = dictionaryByOccurrences(wordOccurrences(word)).dropWhile(x=>x==word)
                                                  //> wordAnagrams: (word: forcomp.AnagramsTest.Word)List[forcomp.AnagramsTest.Wo
                                                  //| rd]
   
   
   wordAnagrams("ate")                            //> res3: List[forcomp.AnagramsTest.Word] = List(eat, tea)
  

  /** Returns the list of all subsets of the occurrence list.
   *  This includes the occurrence itself, i.e. `List(('k', 1), ('o', 1))`
   *  is a subset of `List(('k', 1), ('o', 1))`.
   *  It also include the empty subset `List()`.
   *
   *  Example: the subsets of the occurrence list `List(('a', 2), ('b', 2))` are:
   *
   *    List(
   *      List(),
   *      List(('a', 1)),
   *      List(('a', 2)),
   *      List(('b', 1)),
   *      List(('a', 1), ('b', 1)),
   *      List(('a', 2), ('b', 1)),
   *      List(('b', 2)),
   *      List(('a', 1), ('b', 2)),
   *      List(('a', 2), ('b', 2))
   *    )
   *
   *  Note that the order of the occurrence list subsets does not matter -- the subsets
   *  in the example above could have been displayed in some other order.
   */
  def combinations(occurrences: Occurrences): List[Occurrences] = {
  	if(occurrences.isEmpty)  List(occurrences)
  	else {
  		val nextCombinations = combinations(occurrences.tail)
  		val currentChar = occurrences.head._1
  		val currentCount = occurrences.head._2
  	(nextCombinations::	(for(i<- 1 to currentCount) yield addCharToOccurrencesList((currentChar,i),nextCombinations)).toList).flatten
 		 }
  }                                               //> combinations: (occurrences: forcomp.AnagramsTest.Occurrences)List[forcomp.A
                                                  //| nagramsTest.Occurrences]
  
  def addCharToOccurrencesList(chr:(Char,Int),OccList: List[Occurrences]) : List[Occurrences] = {
		for(occ<-OccList) yield chr::occ
  }                                               //> addCharToOccurrencesList: (chr: (Char, Int), OccList: List[forcomp.Anagrams
                                                  //| Test.Occurrences])List[forcomp.AnagramsTest.Occurrences]
  
  combinations(List(('a', 2), ('b', 2)))          //> res4: List[forcomp.AnagramsTest.Occurrences] = List(List(), List((b,1)), Li
                                                  //| st((b,2)), List((a,1)), List((a,1), (b,1)), List((a,1), (b,2)), List((a,2))
                                                  //| , List((a,2), (b,1)), List((a,2), (b,2)))

  /** Subtracts occurrence list `y` from occurrence list `x`.
   *
   *  The precondition is that the occurrence list `y` is a subset of
   *  the occurrence list `x` -- any character appearing in `y` must
   *  appear in `x`, and its frequency in `y` must be smaller or equal
   *  than its frequency in `x`.
   *
   *  Note: the resulting value is an occurrence - meaning it is sorted
   *  and has no zero-entries.
   */
   
  val x1 = List(('a',2),('b',5))                  //> x1  : List[(Char, Int)] = List((a,2), (b,5))
   
   
   
  def subtract(x: Occurrences, y: Occurrences): Occurrences = {
  		wordOccurrences(removeChar(x.foldLeft(List[Char]())((b,a)=>b:::List.fill(a._2)(a._1)),
 		 	y.foldLeft(List[Char]())((b,a)=>b:::List.fill(a._2)(a._1))).mkString)
  	}                                         //> subtract: (x: forcomp.AnagramsTest.Occurrences, y: forcomp.AnagramsTest.Occ
                                                  //| urrences)forcomp.AnagramsTest.Occurrences
def removeChar(charList1 : List[Char], charList2: List[Char]): List[Char]={
	if(charList2.isEmpty) charList1
	else {
	val i = charList1.indexOf(charList2.head)
	removeChar(charList1.take(i):::charList1.drop(i+1),charList2.tail)
	}
}                                                 //> removeChar: (charList1: List[Char], charList2: List[Char])List[Char]

	subtract(List(('a', 2), ('b', 2)),List(('b',1)))
                                                  //> res5: forcomp.AnagramsTest.Occurrences = List((a,2), (b,1))

  /** Returns a list of all anagram sentences of the given sentence.
   *
   *  An anagram of a sentence is formed by taking the occurrences of all the characters of
   *  all the words in the sentence, and producing all possible combinations of words with those characters,
   *  such that the words have to be from the dictionary.
   *
   *  The number of words in the sentence and its anagrams does not have to correspond.
   *  For example, the sentence `List("I", "love", "you")` is an anagram of the sentence `List("You", "olive")`.
   *
   *  Also, two sentences with the same words but in a different order are considered two different anagrams.
   *  For example, sentences `List("You", "olive")` and `List("olive", "you")` are different anagrams of
   *  `List("I", "love", "you")`.
   *
   *  Here is a full example of a sentence `List("Yes", "man")` and its anagrams for our dictionary:
   *
   *    List(
   *      List(en, as, my),
   *      List(en, my, as),
   *      List(man, yes),
   *      List(men, say),
   *      List(as, en, my),
   *      List(as, my, en),
   *      List(sane, my),
   *      List(Sean, my),
   *      List(my, en, as),
   *      List(my, as, en),
   *      List(my, sane),
   *      List(my, Sean),
   *      List(say, men),
   *      List(yes, man)
   *    )
   *
   *  The different sentences do not have to be output in the order shown above - any order is fine as long as
   *  all the anagrams are there. Every returned word has to exist in the dictionary.
   *
   *  Note: in case that the words of the sentence are in the dictionary, then the sentence is the anagram of itself,
   *  so it has to be returned in this list.
   *
   *  Note: There is only one anagram of an empty sentence.
   */
 /*  def sentenceAnagrams(sentence: Sentence): List[Sentence] = {
  	lazy val senOccurs = sentenceOccurrences(sentence)
  	GetSetenceAnagram(senOccurs,Nil).flatMap(x=>convertOccurrenceToString(x))
  
  }*/
  def convertOccurrenceToString(occurList:List[Occurrences] ) : List[Sentence] = {
  	lazy val wordList = occurList.map(x=>dictionaryByOccurrences(x))
  	def getCombination(wl:List[List[Word]], prefix: List[Sentence]): List[Sentence] = {
  		if(wl.isEmpty) prefix
  		else {
  			val res = for(word<-wl.head) yield prefix.map(x=>word::x)
  			getCombination(wl.tail,res.foldLeft(List[Sentence]())((b,a)=>b:::a))
  		}
  	}
  	
  	getCombination(wordList,List[Sentence](List[Word]()))
  }                                               //> convertOccurrenceToString: (occurList: List[forcomp.AnagramsTest.Occurrence
                                                  //| s])List[forcomp.AnagramsTest.Sentence]
  
   
  convertOccurrenceToString(List(List(('a',1),('e',1),('t',1)),List(('d',1),('g',1),('o',1))))
                                                  //> res6: List[forcomp.AnagramsTest.Sentence] = List(List(dog, ate), List(dog, 
                                                  //| eat), List(dog, tea), List(god, ate), List(god, eat), List(god, tea))
  
  
  /*def GetSetenceAnagram(occur: Occurrences, prefix: List[List[Occurrences]]):List[List[Occurrences]] = {
  	if(occur.isEmpty) prefix
  	else if(!dictionaryByOccurrences.contains(occur)) List[List[Occurrences]](List[Occurrences]())
  	else{
  		lazy val allSubsets : List[Occurrences] = combinations(occur)
  		
  		val res =	for(s <- allSubsets if s.size==1 ) yield GetSetenceAnagram(subtract(occur,s)).map(x=>)
  	res.foldLeft(List[List[Occurrences]]())((b,a)=>b:::a)
  	}
  }   */
  
  
  def GetSetenceAnagram(occur: Occurrences) : List[List[Occurrences]] = {
  
  	if(occur.isEmpty) List[List[Occurrences]](List[Occurrences]())
  	else{
  		lazy val allSubsets : List[Occurrences] = combinations(occur)
  		val res =	for(s <- allSubsets if s.size==1 && dictionaryByOccurrences.contains(s)) yield GetSetenceAnagram(subtract(occur,s)).map(x=>s::x)
  		res.foldLeft(List[List[Occurrences]]())((b,a)=>b:::a)
  	}
  
  }                                               //> GetSetenceAnagram: (occur: forcomp.AnagramsTest.Occurrences)List[List[forco
                                                  //| mp.AnagramsTest.Occurrences]]
  val occur2 = List(('i',1),('l',1),('o',2))      //> occur2  : List[(Char, Int)] = List((i,1), (l,1), (o,2))
  val occur = wordOccurrences("abelsonus")        //> occur  : forcomp.AnagramsTest.Occurrences = List((a,1), (b,1), (e,1), (l,1)
                                                  //| , (n,1), (o,1), (s,2), (u,1))
  
val allSubsets : List[Occurrences] = combinations(occur)
                                                  //> allSubsets  : List[forcomp.AnagramsTest.Occurrences] = List(List(), List((u
                                                  //| ,1)), List((s,1)), List((s,1), (u,1)), List((s,2)), List((s,2), (u,1)), Lis
                                                  //| t((o,1)), List((o,1), (u,1)), List((o,1), (s,1)), List((o,1), (s,1), (u,1))
                                                  //| , List((o,1), (s,2)), List((o,1), (s,2), (u,1)), List((n,1)), List((n,1), (
                                                  //| u,1)), List((n,1), (s,1)), List((n,1), (s,1), (u,1)), List((n,1), (s,2)), L
                                                  //| ist((n,1), (s,2), (u,1)), List((n,1), (o,1)), List((n,1), (o,1), (u,1)), Li
                                                  //| st((n,1), (o,1), (s,1)), List((n,1), (o,1), (s,1), (u,1)), List((n,1), (o,1
                                                  //| ), (s,2)), List((n,1), (o,1), (s,2), (u,1)), List((l,1)), List((l,1), (u,1)
                                                  //| ), List((l,1), (s,1)), List((l,1), (s,1), (u,1)), List((l,1), (s,2)), List(
                                                  //| (l,1), (s,2), (u,1)), List((l,1), (o,1)), List((l,1), (o,1), (u,1)), List((
                                                  //| l,1), (o,1), (s,1)), List((l,1), (o,1), (s,1), (u,1)), List((l,1), (o,1), (
                                                  //| s,2)), List((l,1), (o,1), (s,2), (u,1)), List((l,1), (n,1)), List((l,1), (n
                                                  //| ,1), (u,1)), List((l,1)
                                                  //| Output exceeds cutoff limit.
  	for(s <- allSubsets if dictionaryByOccurrences.contains(s)) yield s
                                                  //> res7: List[forcomp.AnagramsTest.Occurrences] = List(List((s,1), (u,1)), Lis
                                                  //| t((s,2), (u,1)), List((o,1), (s,1)), List((n,1), (u,1)), List((n,1), (o,1))
                                                  //| , List((e,1), (n,1)), List((b,1), (e,1)), List((a,1), (s,1)), List((a,1), (
                                                  //| s,2)), List((a,1), (n,1)), List((a,1), (l,1)))
  		
  		//yield GetSetenceAnagram(subtract(occur,s)).map(x=>s::x)
  		//res.foldLeft(List[List[Occurrences]]())((b,a)=>b:::a)

  val prefix =  List[List[Occurrences]](List[Occurrences]())
                                                  //> prefix  : List[List[forcomp.AnagramsTest.Occurrences]] = List(List())
  for(s <- combinations(occur) if !s.isEmpty&&s.size==1 ) yield  prefix.map(x=>s::x)
                                                  //> res8: List[List[List[forcomp.AnagramsTest.Occurrences]]] = List(List(List(L
                                                  //| ist((u,1)))), List(List(List((s,1)))), List(List(List((s,2)))), List(List(L
                                                  //| ist((o,1)))), List(List(List((n,1)))), List(List(List((l,1)))), List(List(L
                                                  //| ist((e,1)))), List(List(List((b,1)))), List(List(List((a,1)))))
  
  
  GetSetenceAnagram(wordOccurrences("abelsonus")) //> res9: List[List[forcomp.AnagramsTest.Occurrences]] = List()
  
  
  /*def GetAnagrams(occur:Occurrences, suffix: List[Sentence]) :List[Sentence] = {
  
  }*/
  
  
  
 // sentenceAnagrams(List("Yes", "man"))
 
 /*val ss = List(1,2,3,4)
 val a = List(List(5,6),List(7,8))
 for(s<-ss) yield s::a*/
  
  
  }